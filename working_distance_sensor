#include <LiquidCrystal.h> //Load Liquid Crystal Library

LiquidCrystal LCD(10, 9, 5, 4, 3, 2); //Create Liquid Crystal Object called LCD

int trigPin = 13; //Sensor Trip pin connected to Arduino pin 13

int echoPin = 11; //Sensor Echo pin connected to Arduino pin 11

int myCounter = 0; //declare your variable myCounter and set to 0

int servoControlPin = 6; //Servo control line is connected to pin 6

float pingTime; //time for ping to travel from sensor to target and return

float targetDistance; //Distance to Target in inches

float speedOfSound = 776.5; //Speed of sound in miles per hour

#define IN_PIN A0
#define WINDOW_SIZE 5

int INDEX = 0;
int VALUE = 0;
int SUM = 0;
int READINGS[WINDOW_SIZE];
int AVERAGED = 0;

void setup() {
  pinMode(IN_PIN, INPUT);
  Serial.begin(9600);

  pinMode(trigPin, OUTPUT);

  pinMode(echoPin, INPUT);

  LCD.begin(16, 2); //Tell Arduino to start your 16 column 2 row LCD

  LCD.setCursor(0, 0); //Set LCD cursor to upper left corner, column 0, row 0

 LCD.print("Current Value, Average:"); //Print Message on First Row

}

void loop() {

  digitalWrite(trigPin, LOW); //Set trigger pin low

  delayMicroseconds(2000); //Let signal settle

  digitalWrite(trigPin, HIGH); //Set trigPin high

  delayMicroseconds(15); //Delay in high state

  digitalWrite(trigPin, LOW); //ping has now been sent

  delayMicroseconds(10); //Delay in high state

  pingTime = pulseIn(echoPin, HIGH); //pingTime is presented in microceconds

  pingTime = pingTime / 1000000; //convert pingTime to seconds by dividing by 1000000 (microseconds in a second)

  pingTime = pingTime / 3600; //convert pingtime to hourse by dividing by 3600 (seconds in an hour)

  targetDistance = speedOfSound * pingTime; //This will be in miles, since speed of sound was miles per hour targetDistance=targetDistance/2; //Remember ping travels to target and back from target.

  targetDistance = targetDistance * 160934; //Convert miles to cenitmeters by multipling by 160934 (centimeters per mile)

  LCD.setCursor(0, 1); //Set cursor to first column of second row

 // LCD.print(" "); //Print blanks to clear the row

  LCD.setCursor(0, 1); //Set Cursor again to first column of second row

 // LCD.print(targetDistance); //Print measured distance

 // LCD.print(" centimeters"); //Print your units.

  delay(250); //pause to let things settle


  SUM = SUM - READINGS[INDEX];       // Remove the oldest entry from the sum
  VALUE = analogRead(IN_PIN);        // Read the next sensor value
  READINGS[INDEX] = VALUE;           // Add the newest reading to the window
  SUM = SUM + VALUE;                 // Add the newest reading to the sum
  INDEX = (INDEX + 1) % WINDOW_SIZE; // Increment the index, and wrap to 0 if it exceeds the window size

  AVERAGED = SUM / WINDOW_SIZE;      // Divide the sum of the window by the window size for the result

  LCD.print(VALUE);
  LCD.print(",");
  LCD.println(AVERAGED);

  delay(25);
}


